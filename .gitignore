'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Badge } from '@/components/ui/badge';
import { toast } from '@/hooks/use-toast';

const BybitBotMasha = () => {
  // State for bot configuration
  const [config, setConfig] = useState({
    apiKey: '',
    apiSecret: '',
    telegramToken: '',
    telegramChatId: '',
    tradingEnabled: false,
    testnetMode: true,
    symbols: ['BTCUSDT', 'ETHUSDT', 'SOLUSDT'],
    timeframes: ['5', '15', '60', 'D'],
    initialBalance: 1000,
    riskPerTrade: 2,
    useStopLoss: true,
    stopLossPercent: 2,
    useTakeProfit: true,
    takeProfitPercent: 4,
    useMacroData: true,
  });

  // State for bot status
  const [botStatus, setBotStatus] = useState({
    isRunning: false,
    startTime: null,
    trades: [],
    balance: 0,
    profit: 0,
    winRate: 0,
  });

  // State for backtest results
  const [backtestResults, setBacktestResults] = useState(null);

  // Load config from localStorage on component mount
  useEffect(() => {
    const savedConfig = localStorage.getItem('bybitBotConfig');
    if (savedConfig) {
      try {
        setConfig(JSON.parse(savedConfig));
        toast({
          title: 'Configuration loaded',
          description: 'Your saved bot configuration has been loaded.',
        });
      } catch (e) {
        console.error('Failed to parse saved config:', e);
      }
    }
  }, []);

  // Save config to localStorage when it changes
  useEffect(() => {
    localStorage.setItem('bybitBotConfig', JSON.stringify(config));
  }, [config]);

  // Handle form input changes
  const handleConfigChange = (e) => {
    const { name, value, type, checked } = e.target;
    setConfig({
      ...config,
      [name]: type === 'checkbox' ? checked : value,
    });
  };

  // Handle select changes
  const handleSelectChange = (name, value) => {
    setConfig({
      ...config,
      [name]: value,
    });
  };

  // Handle multi-select changes for symbols and timeframes
  const toggleArrayItem = (array, item) => {
    if (array.includes(item)) {
      return array.filter(i => i !== item);
    } else {
      return [...array, item];
    }
  };

  const handleSymbolToggle = (symbol) => {
    setConfig({
      ...config,
      symbols: toggleArrayItem(config.symbols, symbol),
    });
  };

  const handleTimeframeToggle = (timeframe) => {
    setConfig({
      ...config,
      timeframes: toggleArrayItem(config.timeframes, timeframe),
    });
  };

  // Start trading bot
  const startBot = async () => {
    try {
      toast({
        title: 'Starting Bot',
        description: 'Initializing the trading bot...',
      });

      // Here you would call your API to start the bot
      // For now, we'll just simulate it
      setBotStatus({
        ...botStatus,
        isRunning: true,
        startTime: new Date(),
      });

      toast({
        title: 'Bot Started',
        description: 'The trading bot is now running!',
        variant: 'success',
      });
    } catch (error) {
      console.error('Failed to start bot:', error);
      toast({
        title: 'Error',
        description: 'Failed to start the trading bot. Please check your configuration.',
        variant: 'destructive',
      });
    }
  };

  // Stop trading bot
  const stopBot = async () => {
    try {
      toast({
        title: 'Stopping Bot',
        description: 'Shutting down the trading bot...',
      });

      // Here you would call your API to stop the bot
      // For now, we'll just simulate it
      setBotStatus({
        ...botStatus,
        isRunning: false,
      });

      toast({
        title: 'Bot Stopped',
        description: 'The trading bot has been stopped.',
        variant: 'success',
      });
    } catch (error) {
      console.error('Failed to stop bot:', error);
      toast({
        title: 'Error',
        description: 'Failed to stop the trading bot.',
        variant: 'destructive',
      });
    }
  };

  // Run backtest
  const runBacktest = async () => {
    try {
      toast({
        title: 'Running Backtest',
        description: 'Running backtest with current configuration...',
      });

      // Here you would call your API to run a backtest
      // For now, we'll just simulate it with some mock results
      setTimeout(() => {
        const mockResults = {
          stats: {
            startingBalance: 1000,
            endingBalance: 1250,
            totalProfit: 250,
            profitPercent: 25,
            numTrades: 24,
            winningTrades: 16,
            losingTrades: 8,
            winRate: 66.67,
            maxDrawdown: 12.5,
            sharpeRatio: 1.8,
          },
          bestTrade: {
            strategy: 'EMA Crossover',
            profitLoss: 45,
            profitLossPercent: 4.5,
          },
          worstTrade: {
            strategy: 'RSI Divergence',
            profitLoss: -28,
            profitLossPercent: -2.8,
          },
          equityCurve: [1000, 1020, 1050, 1040, 1080, 1100, 1090, 1120, 1150, 1200, 1180, 1210, 1250],
        };

        setBacktestResults(mockResults);

        toast({
          title: 'Backtest Complete',
          description: `Profit: $${mockResults.stats.totalProfit.toFixed(2)} (${mockResults.stats.profitPercent.toFixed(2)}%)`,
          variant: 'success',
        });
      }, 3000);
    } catch (error) {
      console.error('Failed to run backtest:', error);
      toast({
        title: 'Error',
        description: 'Failed to run backtest.',
        variant: 'destructive',
      });
    }
  };

  // Available symbols and timeframes
  const availableSymbols = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'BNBUSDT', 'ADAUSDT', 'DOGEUSDT', 'XRPUSDT'];
  const availableTimeframes = ['5', '15', '30', '60', '240', 'D'];

  return (
    <div className="container mx-auto py-8 px-4">
      <h1 className="text-3xl font-bold mb-8 text-center">Masha's Bybit Trading Bot</h1>
      
      <Tabs defaultValue="config">
        <TabsList className="mb-8 grid w-full grid-cols-4">
          <TabsTrigger value="config">Configuration</TabsTrigger>
          <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
          <TabsTrigger value="backtest">Backtest</TabsTrigger>
          <TabsTrigger value="logs">Logs</TabsTrigger>
        </TabsList>
        
        {/* Configuration Tab */}
        <TabsContent value="config">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {/* API Settings */}
            <Card>
              <CardHeader>
                <CardTitle>API Settings</CardTitle>
                <CardDescription>Configure your Bybit API credentials</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="apiKey">API Key</Label>
                  <Input 
                    id="apiKey" 
                    name="apiKey" 
                    type="password"
                    value={config.apiKey} 
                    onChange={handleConfigChange} 
                    placeholder="Enter your Bybit API key"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="apiSecret">API Secret</Label>
                  <Input 
                    id="apiSecret" 
                    name="apiSecret" 
                    type="password"
                    value={config.apiSecret} 
                    onChange={handleConfigChange} 
                    placeholder="Enter your Bybit API secret"
                  />
                </div>
                <div className="flex items-center space-x-2">
                  <Switch 
                    id="testnetMode" 
                    name="testnetMode"
                    checked={config.testnetMode} 
                    onCheckedChange={(checked) => setConfig({...config, testnetMode: checked})}
                  />
                  <Label htmlFor="testnetMode">Use Testnet (practice mode)</Label>
                </div>
              </CardContent>
            </Card>

            {/* Telegram Settings */}
            <Card>
              <CardHeader>
                <CardTitle>Telegram Notifications</CardTitle>
                <CardDescription>Configure Telegram bot for trade notifications</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="telegramToken">Telegram Bot Token</Label>
                  <Input 
                    id="telegramToken" 
                    name="telegramToken" 
                    type="password"
                    value={config.telegramToken} 
                    onChange={handleConfigChange} 
                    placeholder="Enter your Telegram bot token"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="telegramChatId">Telegram Chat ID</Label>
                  <Input 
                    id="telegramChatId" 
                    name="telegramChatId" 
                    value={config.telegramChatId} 
                    onChange={handleConfigChange} 
                    placeholder="Enter your Telegram chat ID"
                  />
                </div>
                <div className="pt-4">
                  <Button 
                    variant="outline"
                    onClick={() => {
                      toast({
                        title: 'Test Message Sent',
                        description: 'If configured correctly, you should receive a message on Telegram.',
                      });
                    }}
                  >
                    Test Telegram Notification
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Trading Pairs */}
            <Card>
              <CardHeader>
                <CardTitle>Trading Pairs</CardTitle>
                <CardDescription>Select cryptocurrencies to trade</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  {availableSymbols.map(symbol => (
                    <Badge 
                      key={symbol}
                      variant={config.symbols.includes(symbol) ? "default" : "outline"}
                      className="cursor-pointer"
                      onClick={() => handleSymbolToggle(symbol)}
                    >
                      {symbol}
                    </Badge>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Timeframes */}
            <Card>
              <CardHeader>
                <CardTitle>Timeframes</CardTitle>
                <CardDescription>Select trading timeframes</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  {availableTimeframes.map(timeframe => (
                    <Badge 
                      key={timeframe}
                      variant={config.timeframes.includes(timeframe) ? "default" : "outline"}
                      className="cursor-pointer"
                      onClick={() => handleTimeframeToggle(timeframe)}
                    >
                      {timeframe === 'D' ? '1 Day' : `${timeframe} min`}
                    </Badge>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Risk Management */}
            <Card>
              <CardHeader>
                <CardTitle>Risk Management</CardTitle>
                <CardDescription>Configure trading risk parameters</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <Label htmlFor="riskPerTrade">Risk Per Trade: {config.riskPerTrade}%</Label>
                  </div>
                  <Slider
                    id="riskPerTrade"
                    min={0.1}
                    max={5}
                    step={0.1}
                    value={[config.riskPerTrade]}
                    onValueChange={(value) => setConfig({...config, riskPerTrade: value[0]})}
                  />
                </div>
                
                <div className="flex items-center space-x-2 pt-2">
                  <Switch 
                    id="useStopLoss" 
                    name="useStopLoss"
                    checked={config.useStopLoss} 
                    onCheckedChange={(checked) => setConfig({...config, useStopLoss: checked})}
                  />
                  <Label htmlFor="useStopLoss">Use Stop Loss</Label>
                </div>
                
                {config.useStopLoss && (
                  <div className="space-y-2 pl-6">
                    <div className="flex justify-between">
                      <Label htmlFor="stopLossPercent">Stop Loss: {config.stopLossPercent}%</Label>
                    </div>
                    <Slider
                      id="stopLossPercent"
                      min={0.5}
                      max={10}
                      step={0.5}
                      value={[config.stopLossPercent]}
                      onValueChange={(value) => setConfig({...config, stopLossPercent: value[0]})}
                    />
                  </div>
                )}
                
                <div className="flex items-center space-x-2 pt-2">
                  <Switch 
                    id="useTakeProfit" 
                    name="useTakeProfit"
                    checked={config.useTakeProfit} 
                    onCheckedChange={(checked) => setConfig({...config, useTakeProfit: checked})}
                  />
                  <Label htmlFor="useTakeProfit">Use Take Profit</Label>
                </div>
                
                {config.useTakeProfit && (
                  <div className="space-y-2 pl-6">
                    <div className="flex justify-between">
                      <Label htmlFor="takeProfitPercent">Take Profit: {config.takeProfitPercent}%</Label>
                    </div>
                    <Slider
                      id="takeProfitPercent"
                      min={1}
                      max={20}
                      step={0.5}
                      value={[config.takeProfitPercent]}
                      onValueChange={(value) => setConfig({...config, takeProfitPercent: value[0]})}
                    />
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Advanced Settings */}
            <Card>
              <CardHeader>
                <CardTitle>Advanced Settings</CardTitle>
                <CardDescription>Configure additional bot parameters</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="initialBalance">Initial Balance (USDT)</Label>
                  <Input 
                    id="initialBalance" 
                    name="initialBalance" 
                    type="number"
                    value={config.initialBalance} 
                    onChange={handleConfigChange} 
                  />
                </div>
                <div className="flex items-center space-x-2 pt-2">
                  <Switch 
                    id="useMacroData" 
                    name="useMacroData"
                    checked={config.useMacroData} 
                    onCheckedChange={(checked) => setConfig({...config, useMacroData: checked})}
                  />
                  <Label htmlFor="useMacroData">Use Macroeconomic Data</Label>
                </div>
                <div className="pt-4 space-y-2">
                  <div className="flex items-center space-x-2">
                    <Switch 
                      id="tradingEnabled" 
                      name="tradingEnabled"
                      checked={config.tradingEnabled} 
                      onCheckedChange={(checked) => setConfig({...config, tradingEnabled: checked})}
                    />
                    <Label htmlFor="tradingEnabled" className="font-bold">
                      {config.tradingEnabled ? 'Trading Enabled' : 'Trading Disabled'}
                    </Label>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    {config.tradingEnabled ? 
                      'Bot will execute real trades when started' : 
                      'Bot will run in simulation mode only (no trades executed)'}
                  </p>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button variant="outline" onClick={() => {
                  const defaultConfig = {
                    apiKey: '',
                    apiSecret: '',
                    telegramToken: '',
                    telegramChatId: '',
                    tradingEnabled: false,
                    testnetMode: true,
                    symbols: ['BTCUSDT', 'ETHUSDT', 'SOLUSDT'],
                    timeframes: ['5', '15', '60', 'D'],
                    initialBalance: 1000,
                    riskPerTrade: 2,
                    useStopLoss: true,
                    stopLossPercent: 2,
                    useTakeProfit: true,
                    takeProfitPercent: 4,
                    useMacroData: true,
                  };
                  setConfig(defaultConfig);
                  toast({
                    title: 'Reset to Defaults',
                    description: 'Configuration has been reset to default values.',
                  });
                }}>
                  Reset to Defaults
                </Button>
                <Button onClick={() => {
                  toast({
                    title: 'Configuration Saved',
                    description: 'Your bot configuration has been saved.',
                    variant: 'success',
                  });
                }}>
                  Save Configuration
                </Button>
              </CardFooter>
            </Card>
          </div>
        </TabsContent>
        
        {/* Dashboard Tab */}
        <TabsContent value="dashboard">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Bot Status */}
            <Card>
              <CardHeader>
                <CardTitle>Bot Status</CardTitle>
                <CardDescription>Current trading bot status</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <span>Status:</span>
                    <Badge variant={botStatus.isRunning ? "success" : "secondary"}>
                      {botStatus.isRunning ? 'Running' : 'Stopped'}
                    </Badge>
                  </div>
                  <div className="flex justify-between">
                    <span>Mode:</span>
                    <span>{config.testnetMode ? 'Testnet' : 'Live'}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Trading:</span>
                    <span>{config.tradingEnabled ? 'Enabled' : 'Disabled'}</span>
                  </div>
                  {botStatus.isRunning && botStatus.startTime && (
                    <div className="flex justify-between">
                      <span>Running since:</span>
                      <span>{new Date(botStatus.startTime).toLocaleString()}</span>
                    </div>
                  )}
                </div>
              </CardContent>
              <CardFooter>
                {!botStatus.isRunning ? (
                  <Button className="w-full" onClick={startBot}>
                    Start Bot
                  </Button>
                ) : (
                  <Button className="w-full" variant="destructive" onClick={stopBot}>
                    Stop Bot
                  </Button>
                )}
              </CardFooter>
            </Card>

            {/* Performance Summary */}
            <Card>
              <CardHeader>
                <CardTitle>Performance Summary</CardTitle>
                <CardDescription>Trading performance metrics</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex justify-between">
                    <span>Balance:</span>
                    <span>${botStatus.balance.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Profit/Loss:</span>
                    <span className={botStatus.profit >= 0 ? 'text-green-500' : 'text-red-500'}>
                      {botStatus.profit >= 0 ? '+' : ''}{botStatus.profit.toFixed(2)} USDT
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span>Win Rate:</span>
                    <span>{botStatus.winRate.toFixed(1)}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Total Trades:</span>
                    <span>{botStatus.trades.length}</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Active Pairs */}
            <Card>
              <CardHeader>
                <CardTitle>Active Trading Pairs</CardTitle>
                <CardDescription>Currently monitored markets</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {config.symbols.map(symbol => (
                    <div key={symbol} className="flex justify-between items-center p-2 bg-secondary/30 rounded-md">
                      <span className="font-medium">{symbol}</span>
                      <span className="text-sm text-muted-foreground">
                        {config.timeframes.join(', ')}
                      </span>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Recent Trades */}
            <Card className="md:col-span-3">
              <CardHeader>
                <CardTitle>Recent Trades</CardTitle>
                <CardDescription>Latest trading activity</CardDescription>
              </CardHeader>
              <CardContent>
                {botStatus.trades.length === 0 ? (
                  <p className="text-center py-8 text-muted-foreground">No trades have been executed yet.</p>
                ) : (
                  <div className="border rounded-md">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b">
                          <th className="p-2 text-left">Time</th>
                          <th className="p-2 text-left">Pair</th>
                          <th className="p-2 text-left">Side</th>
                          <th className="p-2 text-left">Price</th>
                          <th className="p-2 text-left">Size</th>
                          <th className="p-2 text-left">P/L</th>
                          <th className="p-2 text-left">Strategy</th>
                        </tr>
                      </thead>
                      <tbody>
                        {/* Mock data for now */}
                        <tr className="border-b">
                          <td className="p-2">2025-05-25 14:32:15</td>
                          <td className="p-2">BTCUSDT</td>
                          <td className="p-2 text-green-500">BUY</td>
                          <td className="p-2">65432.50</td>
                          <td className="p-2">0.05</td>
                          <td className="p-2 text-green-500">+45.20</td>
                          <td className="p-2">EMA Crossover</td>
                        </tr>
                        <tr className="border-b">
                          <td className="p-2">2025-05-25 12:15:42</td>
                          <td className="p-2">ETHUSDT</td>
                          <td className="p-2 text-red-500">SELL</td>
                          <td className="p-2">3245.75</td>
                          <td className="p-2">0.12</td>
                          <td className="p-2 text-red-500">-18.35</td>
                          <td className="p-2">RSI Divergence</td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        {/* Backtest Tab */}
        <TabsContent value="backtest">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Backtest Configuration */}
            <Card>
              <CardHeader>
                <CardTitle>Backtest Configuration</CardTitle>
                <CardDescription>Configure backtest parameters</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="backtestPeriod">Backtest Period</Label>
                  <Select defaultValue="30">
                    <SelectTrigger>
                      <SelectValue placeholder="Select period" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="7">Last 7 days</SelectItem>
                      <SelectItem value="14">Last 14 days</SelectItem>
                      <SelectItem value="30">Last 30 days</SelectItem>
                      <SelectItem value="90">Last 90 days</SelectItem>
                      <SelectItem value="180">Last 6 months</SelectItem>
                      <SelectItem value="365">Last 1 year</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label>Pairs to Test</Label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {availableSymbols.map(symbol => (
                      <Badge 
                        key={symbol}
                        variant={config.symbols.includes(symbol) ? "default" : "outline"}
                        className="cursor-pointer"
                        onClick={() => handleSymbolToggle(symbol)}
                      >
                        {symbol}
                      </Badge>
                    ))}
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label>Strategies to Test</Label>
                  <div className="grid grid-cols-2 gap-2 mt-2">
                    <div className="flex items-center space-x-2">
                      <input type="checkbox" id="meanReversion" defaultChecked />
                      <label htmlFor="meanReversion">Mean Reversion</label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input type="checkbox" id="emaCrossover" defaultChecked />
                      <label htmlFor="emaCrossover">EMA Crossover</label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input type="checkbox" id="rsiDivergence" defaultChecked />
                      <label htmlFor="rsiDivergence">RSI Divergence</label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input type="checkbox" id="bollingerSqueeze" defaultChecked />
                      <label htmlFor="bollingerSqueeze">Bollinger Squeeze</label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input type="checkbox" id="supertrend" defaultChecked />
                      <label htmlFor="supertrend">Supertrend</label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input type="checkbox" id="momentumRSI" defaultChecked />
                      <label htmlFor="momentumRSI">Momentum RSI</label>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button className="w-full" onClick={runBacktest}>
                  Run Backtest
                </Button>
              </CardFooter>
            </Card>

            {/* Backtest Results */}
            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle>Backtest Results</CardTitle>
                <CardDescription>Performance analysis</CardDescription>
              </CardHeader>
              <CardContent>
                {!backtestResults ? (
                  <p className="text-center py-8 text-muted-foreground">Run a backtest to see results.</p>
                ) : (
                  <div className="space-y-6">
                    <div className="grid grid-cols-3 gap-4">
                      <div className="bg-secondary/30 p-4 rounded-md text-center">
                        <div className="text-2xl font-bold text-primary">
                          ${backtestResults.stats.totalProfit.toFixed(2)}
                        </div>
                        <div className="text-sm text-muted-foreground">Total Profit</div>
                      </div>
                      <div className="bg-secondary/30 p-4 rounded-md text-center">
                        <div className="text-2xl font-bold text-primary">
                          {backtestResults.stats.profitPercent.toFixed(2)}%
                        </div>
                        <div className="text-sm text-muted-foreground">Return</div>
                      </div>
                      <div className="bg-secondary/30 p-4 rounded-md text-center">
                        <div className="text-2xl font-bold text-primary">
                          {backtestResults.stats.winRate.toFixed(1)}%
                        </div>
                        <div className="text-sm text-muted-foreground">Win Rate</div>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <h3 className="font-medium">Detailed Statistics</h3>
                      <div className="grid grid-cols-2 gap-x-8 gap-y-2">
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Starting Balance:</span>
                          <span>${backtestResults.stats.startingBalance.toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Ending Balance:</span>
                          <span>${backtestResults.stats.endingBalance.toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Total Trades:</span>
                          <span>{backtestResults.stats.numTrades}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Win/Loss:</span>
                          <span>{backtestResults.stats.winningTrades}/{backtestResults.stats.losingTrades}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Max Drawdown:</span>
                          <span>{backtestResults.stats.maxDrawdown.toFixed(2)}%</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-muted-foreground">Sharpe Ratio:</span>
                          <span>{backtestResults.stats.sharpeRatio.toFixed(2)}</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <h3 className="font-medium">Best Trade</h3>
                        <div className="bg-green-500/10 border border-green-500/20 p-3 rounded-md">
                          <div className="text-sm">Strategy: {backtestResults.bestTrade.strategy}</div>
                          <div className="text-lg font-semibold text-green-500">
                            +${backtestResults.bestTrade.profitLoss.toFixed(2)} (+{backtestResults.bestTrade.profitLossPercent.toFixed(2)}%)
                          </div>
                        </div>
                      </div>
                      <div className="space-y-2">
                        <h3 className="font-medium">Worst Trade</h3>
                        <div className="bg-red-500/10 border border-red-500/20 p-3 rounded-md">
                          <div className="text-sm">Strategy: {backtestResults.worstTrade.strategy}</div>
                          <div className="text-lg font-semibold text-red-500">
                            ${backtestResults.worstTrade.profitLoss.toFixed(2)} ({backtestResults.worstTrade.profitLossPercent.toFixed(2)}%)
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <h3 className="font-medium">Equity Curve</h3>
                      <div className="h-64 bg-secondary/30 rounded-md p-4">
                        <div className="h-full flex items-end">
                          {backtestResults.equityCurve.map((value, index) => {
                            const max = Math.max(...backtestResults.equityCurve);
                            const min = Math.min(...backtestResults.equityCurve);
                            const range = max - min;
                            const height = range > 0 ? ((value - min) / range) * 100 : 50;
                            
                            return (
                              <div 
                                key={index}
                                className="flex-1 mx-0.5 bg-primary"
                                style={{ height: `${height}%` }}
                              />
                            );
                          })}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        {/* Logs Tab */}
        <TabsContent value="logs">
          <Card>
            <CardHeader>
              <CardTitle>Bot Activity Logs</CardTitle>
              <CardDescription>Recent bot activity and events</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="border rounded-md p-4 bg-black text-white font-mono text-sm h-[600px] overflow-y-auto">
                <div className="space-y-2">
                  <p className="text-gray-400">[2025-05-26 10:15:22] [INFO] Bot started in testnet mode</p>
                  <p className="text-gray-400">[2025-05-26 10:15:24] [INFO] Checking market data for BTCUSDT, ETHUSDT, SOLUSDT</p>
                  <p className="text-green-400">[2025-05-26 10:16:12] [SIGNAL] BTCUSDT 15min - Buy signal detected (EMA Crossover, strength: 72.5)</p>
                  <p className="text-yellow-400">[2025-05-26 10:16:13] [TRADE] Executing BUY order for BTCUSDT: 0.05 BTC at $65432.50</p>
                  <p className="text-gray-400">[2025-05-26 10:30:24] [INFO] Checking market data for BTCUSDT, ETHUSDT, SOLUSDT</p>
                  <p className="text-gray-400">[2025-05-26 10:45:24] [INFO] Checking market data for BTCUSDT, ETHUSDT, SOLUSDT</p>
                  <p className="text-green-400">[2025-05-26 10:46:58] [SIGNAL] ETHUSDT 5min - Buy signal detected (RSI Divergence, strength: 68.2)</p>
                  <p className="text-yellow-400">[2025-05-26 10:47:01] [TRADE] Executing BUY order for ETHUSDT: 0.12 ETH at $3245.75</p>
                  <p className="text-gray-400">[2025-05-26 11:00:24] [INFO] Checking market data for BTCUSDT, ETHUSDT, SOLUSDT</p>
                  <p className="text-gray-400">[2025-05-26 11:15:24] [INFO] Checking market data for BTCUSDT, ETHUSDT, SOLUSDT</p>
                  <p className="text-red-400">[2025-05-26 11:18:42] [SIGNAL] ETHUSDT 5min - Sell signal detected (Stop Loss triggered)</p>
                  <p className="text-yellow-400">[2025-05-26 11:18:45] [TRADE] Executing SELL order for ETHUSDT: 0.12 ETH at $3185.20</p>
                  <p className="text-red-400">[2025-05-26 11:18:45] [RESULT] ETHUSDT trade closed with loss: -$18.35 (-1.86%)</p>
                  <p className="text-gray-400">[2025-05-26 11:30:24] [INFO] Checking market data for BTCUSDT, ETHUSDT, SOLUSDT</p>
                  <p className="text-gray-400">[2025-05-26 11:45:24] [INFO] Checking market data for BTCUSDT, ETHUSDT, SOLUSDT</p>
                  <p className="text-gray-400">[2025-05-26 12:00:24] [INFO] Checking market data for BTCUSDT, ETHUSDT, SOLUSDT</p>
                  <p className="text-gray-400">[2025-05-26 12:15:24] [INFO] Checking market data for BTCUSDT, ETHUSDT, SOLUSDT</p>
                  <p className="text-gray-400">[2025-05-26 12:30:24] [INFO] Checking market data for BTCUSDT, ETHUSDT, SOLUSDT</p>
                  <p className="text-red-400">[2025-05-26 12:32:15] [SIGNAL] BTCUSDT 15min - Sell signal detected (Take Profit triggered)</p>
                  <p className="text-yellow-400">[2025-05-26 12:32:18] [TRADE] Executing SELL order for BTCUSDT: 0.05 BTC at $66332.50</p>
                  <p className="text-green-400">[2025-05-26 12:32:18] [RESULT] BTCUSDT trade closed with profit: +$45.20 (+1.37%)</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default BybitBotMasha;
